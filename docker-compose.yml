version: '3.7'

services:

  traefik:
    container_name: traefik
    image: traefik:2.3.6
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
    networks:
      keycloak: { }
      apps: { }
      oauth2-proxy: { }

  keycloak:
    container_name: keycloak
    image: jboss/keycloak:10.0.0
    hostname: keycloak
    command:
      [
          '-b',
          '0.0.0.0',
          '-Djboss.socket.binding.port-offset=1000',
          '-Dkeycloak.migration.action=import',
          '-Dkeycloak.migration.provider=dir',
          '-Dkeycloak.migration.dir=/realm-config',
          '-Dkeycloak.migration.strategy=IGNORE_EXISTING',
      ]
    volumes:
      - ./keycloak:/realm-config
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
    networks:
      keycloak: { }
    ports:
      - 9080:9080/tcp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=PathPrefix(`/auth`)"
      - "traefik.http.services.keycloak.loadbalancer.server.port=9080"

  oauth2-proxy:
    container_name: oauth2-proxy
    image: foo
    command: --config /oauth2-proxy.cfg --alpha-config /oauth2-proxy-alpha-config.yaml
    hostname: oauth2-proxy
    volumes:
      - "./oauth2-proxy-keycloak.cfg:/oauth2-proxy.cfg"
      - "./oauth2-proxy-alpha-config.yaml:/oauth2-proxy-alpha-config.yaml"
    networks:
      keycloak: { }
      apps: { }
      oauth2-proxy: { }
    ports:
      - 4180:4180/tcp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth2-proxy.rule=PathPrefix(`/oauth2`) || PathPrefix(`/app`) || PathPrefix(`/another-app`) || PathPrefix(`/prometheus`)"
      - "traefik.http.services.oauth2-proxy.loadbalancer.server.port=4180"

  httpbin:
    image: nginx:1.15.1
    volumes:
      - ./static-html:/usr/share/nginx/html:ro
    networks:
      apps: { }
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.home.rule=PathPrefix(`/`)"

  app:
    image: containous/whoami
    hostname: whoami
    ports:
      - 82:80
    networks:
      apps: { }
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=PathPrefix(`/whoami`)"
      - "traefik.http.services.app.loadbalancer.server.port=80"

  another-app:
    image: containous/whoami
    hostname: whoelse
    networks:
      apps: { }
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.another-app.rule=PathPrefix(`/whoelse`)"
      - "traefik.http.services.another-app.loadbalancer.server.port=80"

  grafana:
    image: grafana/grafana:7.3.6-ubuntu
    ports:
      - 3000:3000
    networks:
      apps: { }
    environment:
      GF_SERVER_ROOT_URL: "/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  prometheus:
    image: prom/prometheus:v2.21.0
    command:
      - '--web.external-url=/prometheus/'
      - '--web.route-prefix=/prometheus/'
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      apps: { }
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=PathPrefix(`/prom`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.middlewares.prom-replacepathregex.replacepathregex.regex=^/prom/(.*)"
      - "traefik.http.middlewares.prom-replacepathregex.replacepathregex.replacement=/prometheus/$$1"
      - "traefik.http.routers.prometheus.middlewares=prom-replacepathregex@docker"

networks:
  apps: { }
  keycloak: { }
  oauth2-proxy: { }
